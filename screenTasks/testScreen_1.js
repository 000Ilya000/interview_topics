// 7.3 Задачи для интервью
// 7.3.1. Что нужно сделать с первой строчкой, что бы внутри функции 'b' переменная  "a" стала недоступна?

//! Нужно объявить переменную внутри другой функции или блоке, нужно что бы переменная не была глобальной
function b() {
  a;
}

console.log("" || {}); // что выведет и почему    //! Ответ: {} -- ( || возвращает первое истенное значение, а "" - false)
// что такое ?? //! Возваращает первый определенное значение (defined)
console.log("" ?? {}); // что выведет и почему //! Вернет "", так как это первое определенное значение
console.log({}?.user?.name); // обясни строчку ? //! Вернет undefined
//!Проверяет существет ли следующее значение, если да - обращается к нему

_____________________________________________________________;
_____________________________________________________________;
_____________________________________________________________;
_____________________________________________________________;
_____________________________________________________________;

// расскажи про style.less
// *.d.ts - что это такое?
//! Файлы деклараций типов ts (описание типов, модулей, импортов, библиотек и тк)
//* Пример:
// declare module '*.less' {
//   const classes: { [key: string]: string };
//   export default classes;
// }

// что такое immute
// immute const - что означает данная строчка
//! Иммутабельность - объект или переменная не может быть измененаы, если нужны изменения создается новый объект/переменная(иммутабельное обновление)

// что означет следующий код:
const t = {};
t.a = 1;
//! Создается пустой объект и далее в него записывается ключ a со значением 1

// что такое currying
//! Curring - функциональное программирование: при функция возрвращает другую функцию,
//! которая использует аргумент из первой, при каждом следуещем вызове будет возвращаться последовательно следующее значение
//* Пример:
function add(x) {
  return function (y) {
    return x + y;
  };
}

const add5 = add(5); //возвращает функцию, которая будет прибавлять следующее значение к 5
console.log(add5(3)); // возвращает 8 (5 + 3)
