// что выведется в консоль и почему?

//  4  3
function foo(a, b) {
  console.log(b);

  return {
    foo: (c) => foo(c, a),
  };
}

foo(1).foo(2).foo(3).foo(4);

// _____________________________________________________________

// undefiend, 1, 2, 3   и потом просто возвращает объект с ключом foo

//* Решение:
// Определяем функцию foo, которая принимает два параметра: a и b.
function foo(a, b) {
  // Выводим значение b в консоль.
  console.log(b);

  // Возвращаем объект с методом foo, который принимает параметр c.
  return {
    foo: (c) => foo(c, a), // Здесь мы вызываем foo снова, передавая c как первый аргумент и a как второй.
  };
}

// Начинаем цепочку вызовов: foo(1).foo(2).foo(3).foo(4)
foo(1) // Первый вызов функции foo с аргументом 1. Поскольку b не передан, его значение будет undefined.
  .foo(2) // Здесь мы вызываем метод foo на возвращенном объекте. Теперь c = 2, а a = 1 (из предыдущего вызова).
  .foo(3) // Теперь вызываем метод foo снова. c = 3, а a = 2 (из предыдущего вызова).
  .foo(4); // И снова вызываем метод foo. c = 4, а a = 3 (из предыдущего вызова).

//! Ответ: undefiend, 1, 2, 3
